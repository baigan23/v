def longest_word(string):
    words = string.split()
    longest = max(words, key=len)
    return longest

def char_frequency(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count

def is_palindrome(string):
    reversed_string = string[::-1]
    return string == reversed_string

def first_appearance_index(string, substring):
    index = string.find(substring)
    return index

def word_occurrences(string):
    words = string.split()
    word_count = {}
    for word in words:
        if word in word_count:
            word_count[word] += 1
        else:
            word_count[word] = 1
    return word_count

# Take input from the user
input_string = input("Enter a string: ")

# a) To display word with the longest length
longest = longest_word(input_string)
print(f"a) Word with the longest length: {longest}")

# b) To determines the frequency of occurrence of a particular character in the string
char_to_count = input("Enter a character to count its frequency: ")
frequency = char_frequency(input_string, char_to_count)
print(f"b) Frequency of '{char_to_count}' in the string: {frequency}")

# c) To check whether the given string is a palindrome or not
is_palindrome_result = is_palindrome(input_string)
print(f"c) Is the string a palindrome? {is_palindrome_result}")

# d) To display the index of the first appearance of the substring
substring_to_find = input("Enter a substring to find its first appearance: ")
first_appearance = first_appearance_index(input_string, substring_to_find)
print(f"d) Index of first appearance of '{substring_to_find}': {first_appearance}")

# e) To count the occurrences of each word in the given string
word_count_result = word_occurrences(input_string)
print("e) Word occurrences:")
for word, count in word_count_result.items():
    print(f"   '{word}': {count}")
